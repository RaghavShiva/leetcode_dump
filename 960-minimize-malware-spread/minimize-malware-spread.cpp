class DSU{
    vector<int>par,s;
public:
    DSU(int n){
        par.resize(n+1);
        s.resize(n+1,1);
        for(int i=0;i<=n;i++){
            par[i]=i;
        }
    }
    int find(int u){
        if(par[u]==u) return u;
        return par[u] = find(par[u]);
    }
    void unions(int u, int v){
        int pu = find(u);
        int pv = find(v);
        if(pu==pv) return;
        if(s[pu]<s[pv]){
            s[pv]+=s[pu];
            par[pu]=par[pv];
        }
        else{
            s[pu]+=s[pv];
            par[pv]=par[pu];
        }
    }
    int sz(int u){
        return s[u];
    }
};
class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        int m = initial.size();
        DSU ds(n);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]==1){
                    ds.unions(i,j);
                }
            }
        }
        vector<int> v(n,0);
        for(int i=0;i<m;i++){
            v[ds.find(initial[i])]++;
        }

        int mi = -1, ans = -1;
        for(int i=0;i<m;i++){
            int r = ds.find(initial[i]);
            if(v[r]==1){
                int s = ds.sz(r);
                if(s>mi){
                    mi = s;
                    ans = initial[i];
                }
                else if(s==mi && ans>initial[i]){
                    ans = initial[i];
                }
            }
        }
        if(ans==-1){
            ans=n+1;
            for(int i=0;i<m;i++){
                ans=min(ans,initial[i]);
            }
        }

        return ans;
    }
};