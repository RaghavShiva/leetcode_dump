class Solution {
public:
    int solve(vector<vector<int>>& g, vector<int> in, int x){
        int n = g.size();
        int m = in.size();
        queue<int>q;
        vector<bool> v(n,false);
        for(int i=0;i<m;i++){
            if(i==x) continue;
            v[in[i]] = true;
            q.push(in[i]);
        }
        while(!q.empty()){
            int i = q.front();
            q.pop();
            for(int j=0;j<n;j++){
                if(g[i][j]==1 && !v[j]){
                    v[j]=true;
                    q.push(j);
                }
            }
        }
        int cnt=0;
        for(int i=0;i<n;i++){
            if(v[i]){
                cnt++;
            }
        }
        return cnt;
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        int m = initial.size();
        int mi = n+1, ans = n;
        for(int i=0;i<m;i++){
            int t = solve(graph,initial,i);
            if(mi>t){
                mi = t;
                ans = initial[i];
            }
            else if(mi==t){
                ans = min(ans,initial[i]);
            }
        }
        return ans;
    }
};