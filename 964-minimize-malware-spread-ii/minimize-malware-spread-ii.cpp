class DSU{
    vector<int>par,s;
public:
    DSU(int n){
        par.resize(n+1);
        s.resize(n+1,1);
        for(int i=0;i<=n;i++){
            par[i]=i;
        }
    }
    int find(int u){
        if(par[u]==u) return u;
        return par[u] = find(par[u]);
    }
    void unions(int u, int v){
        int pu = find(u);
        int pv = find(v);
        if(pu==pv) return;
        if(s[pu]<s[pv]){
            s[pv]+=s[pu];
            par[pu]=par[pv];
        }
        else{
            s[pu]+=s[pv];
            par[pv]=par[pu];
        }
    }
    int sz(int u){
        return s[u];
    }
};

class Solution {
public:
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        int m = initial.size();
        DSU ds(n);

        vector<int> ni(n,1);
        for(int i=0;i<m;i++){
            ni[initial[i]]--;
        }

        for(int i=0;i<n;i++){
            if(ni[i]==0) continue;
            for(int j=0;j<n;j++){
                if(graph[i][j]==1 && ni[j]==1){
                    ds.unions(i,j);
                }
            }
        }

        vector<int> cnt(n,0);
        unordered_map<int,unordered_set<int>>mp;
        for(int i=0;i<m;i++){
            unordered_set<int> s;
            for(int j=0;j<n;j++){
                if(ni[j]==0) continue;
                if(graph[initial[i]][j]==1){
                    int p = ds.find(j);
                    s.insert(p);
                }
            }
            mp[i] = s;
            for(auto it:s){
                cnt[it]++;
            }
        }

        int ans = -1, mi = -1;
        for(int i=0;i<m;i++){
            unordered_set<int> s = mp[i];
            int lmi = 0;
            for(auto it:s){
                if(cnt[it]==1){
                    lmi += ds.sz(it);
                }
            }
            if(mi<lmi){
                mi = lmi;
                ans = initial[i];
            }
            if(lmi==mi && ans>initial[i]){
                ans = initial[i];
            }
        }
        return ans;
    }
};